name: Deploy
description: "Deploys an static application to a cloud service"

# Action to deploy the project files to a Cloud Service (supports Github Pages and GCS)
# Steps:
# - Creates a Github Deployment object with status "start" and the name
# - Download an artifact from a previous step
# - Deploy the files to the specified path (inputs.to) in Github Pages or GCS
# - Marks the Github Deployment object as "finished" with the status of the workflow (success, failed)
inputs:
  to:  
    description: 'Directory where the project must be deployed to'
    required: true
  artifact_name:
    description: 'The name of the artifact created in a previous step. If not specified, build-output is used'
    required: false
    default: build-output
    type: string
  environment_name:  
    description: 'The environment name to create a deployment. If not specified, uses the value defined to "to"'
    required: false
    default: ''
    type: string
  github_token:
    description: 'GitHub token with permissions to push to the gh-pages branch'
    required: true
    type: string
  cloud_service:
    description: 'Cloud Service to deploy to (supports GH Pages and GCP)'
    required: true
    type: string
  cloud_credentials:
    description: 'Credentials of the cloud service where the project will be deployed to'
    required: false
    type: string
  cloud_bucket:
    description: 'Name of the Cloud service (eg. GCS) bucket'
    required: false
    type: string
  base_url:
    description: 'Base URL where the deployment can be accessed'
    required: false
    type: string
  cache:
    description: 'Enable or disable cache'
    required: true
    type: bool
  allowed_destination:
    description: 'Check the destination'
    required: true
    type: string
    default: '[/]prod$|[/]staging$|[/]dev$|[/]branches[/]|releases[/]'
  exclude:
    description: 'Regrex expression to exclude files'
    required: false
    type: string
    default: '.*\.md$|\.gitignore$|\.git/.*$|gha-creds-+\w+\.+json*$|\.github/.*$'

runs:
  using: "composite"

  steps:
    - name: Copy custom action repository
      id: copy_custom_action_repo
      shell: bash
      run: |
        export CUSTOM_ACTIONS_PATH=$(dirname $CUSTOM_ACTION_REPO_SUBDIRECTORY)
        export CUSTOM_ACTIONS_NAME=$(basename $(dirname $CUSTOM_ACTIONS_PATH))
        export CUSTOM_ACTIONS_OWNER=$(basename $(dirname $(dirname $CUSTOM_ACTIONS_PATH)))
        export OUT_DIR="$DESTINTATION_PATH/$CUSTOM_ACTIONS_OWNER/$CUSTOM_ACTIONS_NAME"
        mkdir -p $OUT_DIR
        cp -r $CUSTOM_ACTIONS_PATH/* $OUT_DIR